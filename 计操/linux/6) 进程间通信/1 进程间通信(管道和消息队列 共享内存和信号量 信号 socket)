1 管道模型:
    一: 将前一个程序的输出，作为后一个程序的输入。
    二: “|” 表示的管道称为匿名管道，用完了就销毁了。
        ps -ef | grep 关键字 | awk '{print $2}' | xargs kill -9
    三: 命名管道 通过mkfifo命令显式地创建 mkfifo hello
        管道以文件的形式存在，这也符合Linux里面一切皆文件的原则
        往管道里面写入东西: # echo "hello world" > hello
        读取管道里面的内容：# cat < hello 
    四: 管道是一种单向传输数据的机制，它其实是一段缓存，里面的数据只能从一端写入，从另一端读出。
        如果想互相通信，我们需要创建两个管道才行

2 消息队列模型:
    一: 属于System V IPC进程间通信机制体系
    二: System V IPC体系有一个统一的命令行工具：ipcmk，ipcs和ipcrm用于创建、查看和删除IPC对象。
    三: 发送数据时，会分成一个一个独立的数据单元，也就是消息体，每个消息体都是固定大小的存储块，在字节流上不连续。

3 共享内存模型:
    一: 属于System V IPC进程间通信机制体系
    二: 将一块虚拟地址空间映射到相同的物理内存中,不需要拷贝来拷贝去，传来传去。
    三: 创建一个共享内存，调用shmget。
        在IPC体系中，创建一个IPC对象都是xxxget，第一个参数是key，可以通过关联文件的方式实现唯一性
        ftok会根据文件的inode，生成一个近乎唯一的key

4 信号量:
    一: 信号量和共享内存往往要配合使用。
    二: P操作，我们称为申请资源操作。
        V操作，我们称为归还资源操作

5 信号:
    一: 信号没有特别复杂的数据结构，就是用一个代号一样的数字。
    二: 信号可以在任何时候发送给某一进程，进程需要为这个信号配置信号处理函数。

6 Socket(略)

7 适用场景:
    一: 管道是命令行中常用的模式
    二: 消息队列其实很少使用，因为有太多的用户级别的消息队列，功能更强大。
    三: 共享内存加信号量是常用的模式。常见到一些知名的以C语言开发的开源软件都会用到它。
    四: 信号更加常用，机制也比较复杂。


