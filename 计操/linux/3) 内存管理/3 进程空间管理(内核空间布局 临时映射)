1 用户态和内核态的划分: 见图
    略

2 用户态布局: 见图
    一: mmap_base表示虚拟地址空间中用于内存映射的起始地址。
        malloc申请一大块内存的时候，就是通过mmap在这里映射一块区域到物理内存
        加载动态链接库so文件，也是在这个区域里面，映射一块区域到so文件。

3 32位内核态布局: 见图
    一: 在物理内存的开始的896M的空间，会被直接映射到3G至3G+896M的虚拟地址
        在系统启动的时候，物理内存的前1M已经被占用了
        从1M开始加载内核代码段，然后就是内核的全局变量、BSS等，也是ELF里面涵盖的
        高端内存: 高端内存是物理内存的概念,指896M以上的内存
    二: 在896M到VMALLOC_START之间有8M的空间。
    三: VMALLOC_START到VMALLOC_END之间称为内核动态映射空间，
        也即内核想像用户态进程一样malloc申请内存，在内核里面可以使用vmalloc
    四: PKMAP_BASE到FIXADDR_START的空间称为持久内核映射。
        使用alloc_pages()函数的时候，在物理内存的高端内存得到struct page结构，可以调用kmap将其在映射到这个区域。
    五: FIXADDR_START到FIXADDR_TOP(0xFFFF F000)的空间，称为固定映射区域，主要用于满足特殊需求。
        在最后一个区域可以通过kmap_atomic实现临时内核映射
        例: 如果要把文件内容写入物理内存，这件事情要内核来干了
            通过kmap_atomic做一个临时映射，写入物理内存完毕后，再kunmap_atomic来解映射即可。

4 64位内核态布局: 见图
    一: 从0xffff800000000000开始就是内核的部分，只不过一开始有8T的空档区域。
    二: 从__PAGE_OFFSET_BASE(0xffff880000000000)开始的64T的虚拟地址空间是直接映射区域
        也就是减去PAGE_OFFSET就是物理地址
        虚拟地址和物理地址之间的映射在大部分情况下还是会通过建立页表的方式进行映射。
    三: 从VMALLOC_START（0xffffc90000000000）开始到VMALLOC_END（0xffffe90000000000）的32T的空间是给vmalloc的。
    四: 从VMEMMAP_START（0xffffea0000000000）开始的1T空间用于存放物理页面的描述结构struct page的。
    五: 从__START_KERNEL_map（0xffffffff80000000）开始的512M用于存放内核代码段、全局变量、BSS等。
        这里对应到物理内存开始的位置，减去__START_KERNEL_map就能得到物理内存的地址。

