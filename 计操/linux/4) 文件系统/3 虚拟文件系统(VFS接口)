1 进程要想往文件系统里面读写数据，需要很多层的组件一起合作:
    一: 在应用层，进程在进行文件读写操作时，可通过系统调用如sys_open、sys_read、sys_write等。
    二: 在内核，每个进程都需要为打开的文件，维护一定的数据结构。
    三: 在内核，整个系统打开的文件，也需要维护一定的数据结构。
    四: Linux可以支持多达数十种不同的文件系统。它们的实现各不相同，
        因此Linux内核向用户空间提供了虚拟文件系统这个统一的接口，来对文件系统进行操作。
    五: 然后就是对接的是真正的文件系统，例如ext4文件系统。
    六: 为了读写ext4文件系统，要通过块设备I/O层，也即BIO层。这是文件系统层和块设备驱动的接口。
    七: 为了加快块设备的读写效率，我们还有一个缓存层。
    八: 最下层是块设备驱动程序。

2 挂载文件系统:
    一: 如果一种文件系统的类型曾经在内核注册过，这就说明允许你挂载并且使用这个文件系统。
    二: 在文件系统的实现中，每个在硬盘上的结构，在内存中也对应相同格式的结构。
        当所有的数据结构都读到内存里面，内核就可以通过操作这些数据结构，来操作文件系统了。

3 打开文件:
    一: 在每一个进程的task_struct中，有一个 struct files_struct	*files;
    二: files_struct里面最重要的是一个文件描述符列表，每打开一个文件，就会在这个列表中分配一项，下标就是文件描述符。
        文件描述符列表的每一项都是一个指向struct file的指针，也就是说，每打开一个文件，都会有一个struct file对应。
    三: 默认情况下，文件描述符0表示stdin标准输入，文件描述符1表示stdout标准输出，文件描述符2表示stderr标准错误输出
    
