1 汇编和反汇编:
    一: 在 go tool objdump/go tool compile -S 输出的代码中，是没有伪 SP 和 FP 寄存器的，
        所有的 SP 都是硬件寄存器 SP，无论是否带 symbol。

2 caller BP:
    一: caller BP是在编译期由编译器插入的.手写汇编时不用关心,计算frame size时也不用计算caller BP
    二: 插入caller BP的主要判断依据是:
        1)函数的栈帧大小大于0
        2)下述函数返回true
            func Framepointer_enabled(goos, goarch string) bool {
                return framepointer_enabled != 0 && goarch == "amd64" && goos != "nacl"
            }
    三: 如果编译器没有插入caller BP(源代码中所称的 frame pointer),伪SP和伪FP之间就只有returen address
        而插入了caller BP就会多出8字节,也就说伪SP和伪FP的相对位置是不固定的





