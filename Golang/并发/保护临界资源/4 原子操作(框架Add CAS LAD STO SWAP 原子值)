1 (框架-概述):
    一: 可以通过调用这些函数对几种简单类型的值执行原子操作。
        这些类型包括6种：int32 、int64 、uint32 、uint64 、uintptr 和unsafe.Pointer
    二: 这些函数提供的原子操作共有5种：增或减、比较并交换、载入、存储和交换


2 (框架-原子值):
    一: 与sync/atomic包中的其他函数不同，sync/atomic.Value 可接受的被操作值的类型不限。
    二: 该类型有两个公开的指针方法——Load 和Store 
    三: 无论在原子值中存储什么类型的值，只要新值需要根据旧值计算得出，那么在有并发写操作的时候就可能出现问题
        newArray := make([]int, array.length)
        copy(newArray, array.val.Load().([]int))
        newArray[index] = elem + newArray[index]
        array.val.Store(newArray)

3 (框架-Add uint):
    atomic.AddUint32(&ui32, ^uint32(-NN-1))
    atomic.AddUint64(&ui64, ^uint64(-NN-1))
    这表示原子地把uint64 类型的变量ui64 的值增加NN （或者说减小-NN ）

4 第三方库的扩展:
    一: 关注度比较高的uber-go/atomic，它定义和封装了几种与常见类型相对应的原子操作类型，这些类型提供了原子操作的方法。
        这些类型包括 Bool、Duration、Error、Float64、Int32、Int64、String、Uint32、Uint64 等。
    二: 
        var running atomic.Bool
        running.Store(true)
        running.Toggle()
        fmt.Println(running.Load()) // false
        
5 数据一致性:
    一: atomic 不仅仅可以保证赋值的数据完整性，
        还能保证数据的可见性，一旦一个核更新了该地址的值，其它处理器总是能读取到它的最新值。

.1 应用层的原子操作是用同步操作实现的并发安全的操作，真正的原子操作不需要同步原语，直接由CPU保证

.2 CAS+LOAD for 循环:
    func addValue(delta int32) {
        for {
            v := atomic.LoadInt32(&value)
            if atomic.CompareAndSwapInt32(&value, v, (v + delta)) {
                break
            }
        }
    }

.3 SWAP 介于CAS和STORE之间:
    与CAS操作不同，原子交换操作不会关心被操作值的旧值，而是直接设置新值。
    比原子存储操作多做了一步：它会返回被操作值的旧值
    此类操作比CAS操作的约束更少，同时又比原子存储操作的功能更强。
