1 (框架)接口值:
	var x interface{} = os.Stdout
	var y io.Writer = os.Stdout
	fmt.Println(x == y) // true
    x,y:{
        type:*os.File
        value:os.Stdout
    }

2 (框架)理解接口:重点在于方法上，而不是具体的类型上
    io.Writer:它提供了所有类型的写入bytes的抽象，包括文件类型，内存缓冲区，网络链接，HTTP客户端，压缩工具，哈希等等
    io.Reader:Reader可以代表任意可以读取bytes的类型
    io.Closer:Closer可以是任意可以关闭的值

3 (框架) discriminated unions（可辨识联合）:重点在于具体的类型满足这个接口，而不在于接口的方法
    利用一个接口值可以持有各种具体类型值的能力，将这个接口认为是这些类型的联合。
    类型断言用来动态地区别这些类型，使得对每一种情况都不一样

2 Go的接口与c++和java等其他语言的不同之处:
    很多面向对象的语言都有相似的接口概念，但Go语言中接口类型的独特之处在于它是满足隐式实现的。
    当我们使用的类型来自于不受我们控制的包时这种设计尤其有用
    当具体的类型来自不同的作者时这种方式会特别有用

3 注意:T类型的值不拥有所有*T指针的方法;但*T指针的值拥有所有T类型的方法

4 常用接口:
    fmt.Stringer
    flag.Value
    sort.Interface
    http.Handler
    error


5 断言:var _ io.Writer = (*bytes.Buffer)(nil)