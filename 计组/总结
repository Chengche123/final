/*
0 入门篇(性能 指令数 CPI 主频 核心)
*/
1) 功耗和散热: 奔腾 4 的失败，就是受限于超长流水线带来的散热和功耗问题，而移动时代 ARM 的崛起，
  则是因为 Intel 的芯片功耗太大，不足以在小小的手机里放下足够支撑 1 天的电池。

2) 响应时间: 程序的 CPU 执行时间 = 指令数×CPI×Clock Cycle Time

3) 吞吐率: 一: 增加更多的 CPU 核心数量，通过并行来提升性能
          二: 阿姆达尔定律: 优化后的执行时间 = 受优化影响的执行时间 / 加速倍数 + 不受影响的执行时间

/*
1 原理篇 指令(指令 寄存器 链接 装载)
*/
1) 指令分类: 算术运算 逻辑运算 数据传输 条件分支 无条件转移

2) 常用寄存器: PC IR PSW 其他

3) 静态链接: ELF文件格式把各种信息，分成一个一个的Section保存起来:
    一: ELF有一个基本的文件头（File Header），用来表示这个文件的基本属性，比如是否是可执行文件，对应的CPU、操作系统等等
    二: .text Section，也叫作代码段或者指令段（Code Section），用来保存程序的代码和指令；
    三: .data Section，也叫作数据段（Data Section），用来保存程序里面设置好的初始化数据信息；
    四: .rel.text Secion，叫作重定位表（Relocation Table）。
        重定位表里，保留的是当前的文件里面，哪些跳转地址其实是我们不知道的。
    五: .symtab Section，叫作符号表（Symbol Table）。符号表保留了我们所说的当前文件里面定义的函数名称和对应地址的地址簿。

4) 动态链接: 一: 在动态链接的过程中，我们想要“链接”的，不是存储在硬盘上的目标文件代码，而是加载到内存中的共享库（Shared Libraries）。
            二: 对于所有动态链接共享库的程序来讲，虽然我们的共享库用的都是同一段物理内存地址，
                但是在不同的应用程序里，它所在的虚拟内存地址是不同的。

5) 字符集: 一: 我们日常说的Unicode，其实就是一个字符集，包含了150种语言的14万个不同的字符。
           二: 而字符编码则是对于字符集里的这些字符，怎么一一用二进制表示出来的一个字典。
               我们上面说的Unicode，就可以用UTF-8、UTF-16，乃至UTF-32来进行编码，存储成二进制。

/*
2 处理器(流水线 冒险)
*/
1) 整个文件: 3.0 冒险和预测(框架 三种相关)


