1 可维护性（maintainability）:
    如果 bug 容易修复，修改、添加功能能够轻松完成，那我们就可以主观地认为代码对我们来说易维护

2 可读性（readability）:
    我们需要看代码是否符合编码规范、命名是否达意、注释是否详尽、函数是否长短合适、模块划分是否清晰、是否符合高内聚低耦合等等。

3 可扩展性（extensibility）:
    跟可读性一样，代码是否易扩展也很大程度上决定代码是否易维护。
    代码的可扩展性表示，我们在不修改或少量修改原有代码的情况下，通过扩展的方式添加新的功能代码。

4 可复用性（reusability）:
    代码的可复用性可以简单地理解为，尽量减少重复代码的编写，复用已有的代码。
    比如，当讲到面向对象特性的时候，我们会讲到继承、多态存在的目的之一，就是为了提高代码的可复用性

5 面向对象中的继承、多态能让我们写出可复用的代码
  编码规范能让我们写出可读性好的代码
  设计原则中的单一职责、DRY、基于接口而非实现、里式替换原则等，可以让我们写出可复用、灵活、可读性好、易扩展、易维护的代码；
  设计模式可以让我们写出易扩展的代码
  持续重构可以时刻保持代码的可维护性等等