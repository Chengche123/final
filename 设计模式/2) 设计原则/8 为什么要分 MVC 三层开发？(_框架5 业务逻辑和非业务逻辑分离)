1 为什么要分 MVC 三层开发？
    一: 分层能起到代码复用的作用
        同⼀个Repository可能会被多个Service来调⽤，同⼀个Service可能会被多个Controller调⽤
    二: 分层能起到隔离变化的作用:
        当我们需要替换数据库的时候，⽐如从MySQL到Oracle，从Oracle到Redis，
        只需要改动Repository层的代码，Service层的代码完全不需要修改
    三: 分层能起到隔离关注点的作⽤:
        Repository层只关注数据的读写。
        Service层只关注业务逻辑，不关注数据的来源。
        Controller层只关注与外界打交道，数据校验、封装、格式转换，并不关⼼业务逻辑。
    四: 分层能提⾼代码的可测试性:
        Repsitory层的代码通过依赖注⼊的⽅式供Service层使⽤，
        当要测试包含核⼼业务逻辑的Service层代码的时候，
        我们可以⽤mock的数据源替代真实的数据库，注⼊到Service层代码中。
    五: 分层能应对系统的复杂性

2 更加推荐每层都定义各⾃的数据对象这种设计思路，主要有以下3个⽅⾯的原因:
    一: VO、BO、Entity并⾮完全⼀样。
        ⽐如，我们可以在UserEntity、UserBo中定义Password字段，
        但显然不能在UserVo中定义Password字段，否则就会将⽤户的密码暴露出去。
    二: VO、BO、Entity三个类虽然代码重复，但功能语义不重复，从职责上讲是不⼀样的。
    三: 分层清晰。对于⾮常⼤的项⽬来说，结构清晰是第⼀位的！

3 不同分层之间的数据对象该如何互相转化呢？
    一: 当下⼀层的数据通过接⼝调⽤传递到上⼀层之后，我们需要将它转化成上⼀层对应的数据对象类型。
        所以，整个开发的过程会涉及“Entity到BO”和“BO到VO”这两种转化。
    二: 最简单的转化⽅式是⼿动复制。⾃⼰写代码在两个对象之间，⼀个字段⼀个字段的赋值。
        Java中提供了多种数据对象转化⼯具，⽐如BeanUtils、Dozer等，可以⼤⼤简化繁琐的对象转化⼯作。

