0 面向对象分析主要的分析对象是“需求”，因此，面向对象分析可以粗略地看成“需求分析”

1 有一天，你的 leader 找到你说，“为了保证接口调用的安全性，我们希望设计实现一个接口调用鉴权功能，
  只有经过认证之后的系统才能调用我们的接口，没有认证过的系统调用我们的接口会被拒绝。
  我希望由你来负责这个任务的开发，争取尽快上线。”

2 第一轮基础分析
    最简单的解决方案就是，通过用户名加密码来做认证

3 第二轮分析优化
    提出问题: 每次都要明文传输密码。密码很容易被截获
    解决问题: 对密码进行加密之后，再传递到微服务端验证

4 第三轮分析优化
    提出问题: 这样的设计仍然存在重放攻击的风险，还是不够安全
    解决问题: 优化 token 生成算法，引入一个随机变量，让每次接口请求生成的 token 都不一样。我们可以选择时间戳作为随机变量。

5 第四轮分析优化
    提出问题: 未认证系统还是可以在这一分钟的 token 失效窗口内，通过截获请求、重放请求，来调用我们的接口
    解决问题: 权衡安全性、开发成本、对系统性能的影响，这个方案算是比较折中、比较合理的了。

6 最终确定需求:
    一: 调用方进行接口请求的时候，将 URL、AppID、密码、时间戳拼接在一起，通过加密算法生成 token，
        并且将 token、AppID、时间戳拼接在 URL 中，一并发送到微服务端。
    二: 微服务端在接收到调用方的接口请求之后，从请求中拆解出 token、AppID、时间戳。
    三: 微服务端首先检查传递过来的时间戳跟当前时间，是否在 token 失效时间窗口内。
        如果已经超过失效时间，那就算接口调用鉴权失败，拒绝接口调用请求。
    四: 如果 token 验证没有过期失效，微服务端再从自己的存储中，取出 AppID 对应的密码，
        通过同样的 token 生成算法，生成另外一个 token，与调用方传递过来的 token 进行匹配；
        如果一致，则鉴权成功，允许接口调用，否则就拒绝接口调用。