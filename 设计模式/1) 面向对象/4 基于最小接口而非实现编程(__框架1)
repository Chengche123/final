1 “基于接口而非实现编程”这条原则中的“接口”，可以理解为编程语言中的接口或者抽象类。

2 应用这条原则，可以将接口和实现相分离，封装不稳定的实现，暴露稳定的接口
  上游系统面向接口而非实现编程，不依赖不稳定的实现细节
  这样当实现发生变化的时候，上游系统的代码基本上不需要做改动，以此来降低耦合性，提高扩展性。

3 要遵从“基于接口而非实现编程”的原则，具体来讲，我们需要做到下面这 3 点:
    一: 函数的命名不能暴露任何实现细节。
    二: 封装具体的实现细节。
    三: 为实现类定义抽象的接口。

4 在设计接口的时候，我们要多思考一下，这样的接口设计是否足够通用，是否能够做到在替换具体的接口实现的时候，不需要任何接口定义的改动。

5 自己理解:
  接口能够将这两方解耦:实现接口的一方 基于接口编程的一方