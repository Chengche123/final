1 是什么？
    它在不改变原始类（或叫被代理类）代码的情况下，通过引⼊代理类来给原始类附加功能。

1 静态代理模式的实现:
    一: 在不改变原始类（或叫被代理类）的情况下，通过引⼊代理类来给原始类附加功能。
        ⼀般情况下，我们让代理类和原始类实现同样的接⼝
    二: 如果原始类并没有定义接⼝，并且原始类代码并不是我们开发维护的。
        在这种情况下，我们可以通过让代理类继承原始类的⽅法来实现代理模式。

2 动态代理模式的实现: 利用反射
    一: 静态代理需要针对每个类都创建⼀个代理类，并且每个代理类中的代码都有点像模板式的“重复”代码
    二: 对于静态代理存在的问题，我们可以通过动态代理来解决。我们不事先为每个原始类编写代理类
        ⽽是在运⾏的时候动态地创建原始类对应的代理类，然后在系统中⽤代理类替换掉原始类

3 代理模式的应⽤场景:
    一: 业务系统的⾮功能性需求开发: ，⽐如：监控、统计、鉴权、限流、事务、幂等、⽇志等
        将这些附加功能与业务功能解耦，放到代理类中统⼀处理，让程序员只需要关注业务⽅⾯的开发
    二: 代理模式在RPC的应用: 实际上，RPC框架也可以看作⼀种代理模式
        通过远程代理，将⽹络通信、数据编解码等细节隐藏起来。
        客户端在使⽤RPC服务的时候，就像使⽤本地函数⼀样，⽆需了解跟服务器交互的细节
        RPC服务的开发者也只需要开发业务逻辑，就像开发本地使⽤的函数⼀样，不需要关注跟客户端的交互细节
    三: 代理模式在缓存中的应⽤


