1 依赖注⼊框架:
    一: 依赖注⼊框架，或者叫依赖注⼊容器（Dependency Injection Container），简称DI容器
    二: DI容器底层最基本的设计思路就是基于⼯⼚模式的。DI容器相当于⼀个⼤的⼯⼚类，负责在程序启动的时候，
        根据配置（要创建哪些类对象，每个类对象的创建需要依赖哪些其他类对象）事先创建好对象。
    三: 当应⽤程序需要使⽤某个类对象的时候，直接从容器中获取即可。
        正是因为它持有⼀堆对象，所以这个框架才被称为“容器”。
    四: ⼀个⼯⼚类只负责某个类对象或者某⼀组相关类对象（继承⾃同⼀抽象类或者接⼝的⼦类）的创建，
        ⽽DI容器负责的是整个应⽤中所有类对象的创建。
    五: DI容器负责的事情要⽐单纯的⼯⼚模式要多。⽐如，它还包括配置的解析、对象⽣命周期的管理

2 DI容器的核⼼功能:
    一: ⼀个简单的DI容器的核⼼功能⼀般有三个：配置解析、对象创建和对象⽣命周期管理。
    二: 配置解析: 通过⼀种形式，让应⽤告知DI容器要创建哪些对象。这种形式就是我们要讲的配置
    三: 对象创建: 将所有类对象的创建都放到⼀个⼯⼚类中完成就可以了，⽐如BeansFactory。
        “反射”这种机制，它能在程序运⾏的过程中，动态地加载类、创建对象，
        不需要事先在代码中写死要创建哪些对象。
    四: 对象的⽣命周期管理: 
        每次都返回新创建的对象，另⼀种是每次都返回同⼀个事先创建好的对象，也就是所谓的单例对象
        配置对象是否⽀持懒加载。
        配置对象的init-method和destroy-method⽅法

