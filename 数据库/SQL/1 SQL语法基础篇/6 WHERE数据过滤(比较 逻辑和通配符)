1 比较运算符:
    一: 不同的 DBMS 支持的运算符可能是不同的
        比如 Access 不支持（!=），不等于应该使用（<>）。在 MySQL 中，不支持（!>）（!<）等。
    二: SQL：SELECT name, hp_max FROM heros WHERE hp_max > 6000
        SQL：SELECT name, hp_max FROM heros WHERE hp_max BETWEEN 5399 AND 6811
        SQL：SELECT name, hp_max FROM heros WHERE hp_max IS NULL

2 逻辑运算符:
    SQL：SELECT name, hp_max, mp_max FROM heros WHERE hp_max > 6000 AND mp_max > 1700 ORDER BY (hp_max+mp_max) DESC
    SQL：SQL：SELECT name, hp_max, mp_max FROM heros 
         WHERE (hp_max+mp_max) > 8000 OR hp_max > 6000 AND mp_max > 1700 
         ORDER BY (hp_max+mp_max) DESC
    SQL：SELECT name, hp_max, mp_max FROM heros 
         WHERE ((hp_max+mp_max) > 8000 OR hp_max > 6000) AND mp_max > 1700 ORDER BY (hp_max+mp_max) DESC
    SQL：
        SELECT name, role_main, role_assist, hp_max, mp_max, birthdate
        FROM heros 
        WHERE (role_main IN ('法师', '射手') OR role_assist IN ('法师', '射手')) 
        AND DATE(birthdate) NOT BETWEEN '2016-01-01' AND '2017-01-01'
        ORDER BY (hp_max + mp_max) DESC

3 使用通配符进行过滤:
    一: 匹配任意字符串出现的任意次数:
        SQL：SELECT name FROM heros WHERE name LIKE '%太%';
            +--------------+
            | name         |
            +--------------+
            | 东皇太一     |
            | 太乙真人     |
            +--------------+
        不同 DBMS 对通配符的定义不同，在 Access 中使用的是（*）而不是（%）
        字符串的搜索可能是需要区分大小写的,具体是否区分大小写还需要考虑不同的 DBMS 以及它们的配置。
    二: 匹配单个字符，就需要使用下划线 (_) 通配符:
        SQL：SELECT name FROM heros WHERE name LIKE '_%太%';
            +--------------+
            | name         |
            +--------------+
            | 东皇太一     |
            +--------------+      
        在 Access 中使用（?）来代替（_）
        而且在 DB2 中是不支持通配符（_）的
    
4 保持高效率的一个很重要的原因，就是要避免全表扫描，所以我们会考虑在 WHERE 及 ORDER BY 涉及到的列上增加索引。
