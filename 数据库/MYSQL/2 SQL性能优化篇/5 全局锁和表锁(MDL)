1 全局锁:
    一: 是对整个数据库实例加锁
    二: 方法: 命令是 Flush tables with read lock (FTWRL)

2 全局锁使用场景:
    一: 全局锁的典型使用场景是，做全库逻辑备份。也就是把整库每个表都 select 出来存成文本。
    二: 弊端 在备份过程中整个库完全处于只读状态:
        1)如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆；
        2)如果在从库上备份，那么备份期间从库不能执行主库同步过来的 binlog，会导致主从延迟。

3 全局锁替代方案:
    一: 对于全部是InnoDB引擎的库,mysqldump使用参数–single-transaction,在可重复读隔离级别下开启一个事务,来确保拿到一致性视图。
        由于MVCC的支持，这个过程中数据是可以正常更新的。

4 MySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。

5 表锁:
    一: 表锁一般是在数据库引擎不支持行锁的时候才会被用到的
    二: 如果代码里有lock tables这样的语句,建议:
        1)如果还在用 MyISAM 这类不支持事务的引擎，那要安排升级换引擎；
        2)引擎升级了，但是代码还没升级,把 lock tables 和 unlock tables 改成 begin 和 commit，问题就解决了。

6 MDL（metadata lock)
    (框架)一: 当对一个表做增删改查操作的时候，自动加MDL读锁；当要对表做结构变更操作的时候，自动加MDL写锁。
    二: 读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。
    三: 写锁: 如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。
    四: MDL会直到事务提交才释放，在做表结构变更的时候，要小心不要导致锁住线上查询和更新。



