1 一: 事务的特性：要么完全执行，要么都不执行
  二: MySQL，可以通过 SHOW ENGINES 命令来查看当前 MySQL 支持的存储引擎都有哪些，
      以及这些存储引擎是否支持事务。

2 ACID:
    一: A，也就是原子性（Atomicity）。要么完全执行，要么都不执行
    二: C，就是一致性（Consistency）。
        如果事务中的某个操作失败了，系统就会自动撤销当前正在执行的事务，返回到事务操作之前的状态
    三: I，就是隔离性（Isolation）。每个事务都是彼此独立的，不会受到其他事务的执行影响
    四: D，指的是持久性（Durability）。
        即使在系统出故障的情况下，比如系统崩溃或者存储介质发生故障，数据的修改依然是有效的

3 事务的常用控制语句:
    一: START TRANSACTION 或者 BEGIN，作用是显式开启一个事务。
    二: COMMIT：提交事务。当提交事务后，对数据库的修改是永久性的。
        如果我们强行进行 COMMIT，数据库会将这个事务中成功的操作进行提交
    三: ROLLBACK 或者 ROLLBACK TO [SAVEPOINT]，意为回滚事务。
        意思是撤销正在进行的所有没有提交的修改，或者将事务回滚到某个保存点。

4 举例:
    一: 
        DELIMITER $$
        CREATE TABLE test(name varchar(255), PRIMARY KEY (name)) ENGINE=InnoDB;
        BEGIN;
        INSERT INTO test SELECT '关羽';
        COMMIT;
        BEGIN;
        INSERT INTO test SELECT '张飞';
        ROLLBACK;
        SELECT * FROM test; $$
        DELIMITER ; 
            +--------+
            | name   |
            +--------+
            | 关羽   |
            +--------+

5 事务并发处理可能存在的异常都有哪些？
    一: 脏读（Dirty Read）: 读到了其他事务还没有提交的数据。
    二: 不可重复读(Unrepeatable Read): 对某数据进行读取，发现两次读取的结果不同，也就是说没有读到相同的内容。
        这是因为有其他事务对这个数据同时进行了修改或删除
        不可重复读是同一条记录的内容被修改了，重点在于UPDATE或DELETE
    三: 幻读（Phantom Read）: 幻读是查询某一个范围的数据行变多了或者少了，重点在于INSERT

6 事务隔离的级别有哪些？
    一: 读未提交，也就是允许读到未提交的数据，可能会产生脏读、不可重复读、幻读等情况。
    二: 读已提交就是只能读到已经提交的内容，可以避免脏读的产生
    三: 可重复读，保证一个事务在相同查询条件下两次查询得到的数据结果是一致的，
        可以避免不可重复读和脏读，但无法避免幻读。MySQL 默认的隔离级别就是可重复读。
    四: 可串行化，将事务进行串行化，也就是在一个队列中按照顺序执行，但是它牺牲了系统的并发性。

7 设置隔离级别:
    一: 查看当前会话的隔离级别: SHOW VARIABLES LIKE 'transaction_isolation';
    二: 把隔离级别降到最低，设置为 READ UNCOMMITTED（读未提交）:
        SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

8 权衡和取舍:
    隔离级别越低，意味着系统吞吐量（并发程度）越大，但同时也意味着出现异常问题的可能性会更大

9 autocommit:
    一: 当我们设置 autocommit=0 时，不论是否采用 START TRANSACTION 或者 BEGIN 的方式来开启事务，
        都需要用 COMMIT 进行提交，让事务生效，使用 ROLLBACK 对事务进行回滚。
    二: 当我们设置 autocommit=1 时，每条 SQL 语句都会自动进行提交。
        不过这时，如果你采用 START TRANSACTION 或者 BEGIN 的方式来显式地开启事务，
        那么这个事务只有在 COMMIT 时才会生效，在 ROLLBACK 时才会回滚。







