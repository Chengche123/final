1 笛卡尔乘积:
    一: SQL: SELECT * FROM player CROSS JOIN team
        SQL: SELECT * FROM player JOIN team

2 等值连接:
    一: SELECT *
        FROM player JOIN team ON player.team_id = team.team_id;

3 非等值连接:
    一: 如果想要知道每个球员的身高的级别，可以采用非等值连接查询。
            SELECT a.player_name,b.height_level
            FROM player AS a JOIN height_grades AS b 
            ON a.height BETWEEN b.height_lowest AND b.height_highest; 
    二: 查询不同身高级别（对应 height_grades 表）对应的球员数量（对应 player 表）:
            SELECT b.height_level,COUNT(player_id) AS num
            FROM player AS a JOIN height_grades AS b ON a.height BETWEEN b.height_lowest AND b.height_highest
            GROUP BY b.height_level
            ORDER BY num DESC;

4 外连接:
    一: 左外连接:
        SELECT * 
        FROM player LEFT JOIN team 
        ON player.team_id = team.team_id
    二: 右外连接:
        SELECT * 
        FROM player RIGHT JOIN team 
        ON player.team_id = team.team_id

5 自连接:
    一: 查看比布雷克·格里芬身高高的球员都有哪些
            SELECT a.player_name,a.height
            FROM player AS a JOIN player AS b
            ON b.player_name = '布雷克-格里芬' AND a.height > b.height;

6 多表连接建议使用JOIN:
    一: 层次性更强，可读性更强
        SELECT ...
        FROM table1
            JOIN table2 ON table1 和 table2 的连接条件
                JOIN table3 ON table2 和 table3 的连接条件
    二: 它的嵌套逻辑类似我们使用的 FOR 循环：
        for t1 in table1:
            for t2 in table2:
            if condition1:
                for t3 in table3:
                    if condition2:
                        output t1 + t2 + t3
    三: 例:
        SELECT a.player_name,b.team_name,c.height_level
        FROM player AS a
            JOIN team AS b ON a.team_id = b.team_id
                JOIN height_grades AS c ON a.height BETWEEN c.height_lowest AND c.height_highest;


7 不同 DBMS 中使用连接需要注意的地方:
    一: 不是所有的 DBMS 都支持全外连接:
        不仅 MySQL 不支持，Access、SQLite、MariaDB 等数据库软件也不支持
        不过在 Oracle、DB2、SQL Server 中是支持的。
    二: Oracle 没有表别名 AS
        在 Oracle 中是不存在 AS 的，使用表别名的时候，直接在表名后面写上表别名即可，
        比如 player p，而不是 player AS p。
    三: SQLite 的外连接只有左连接
        如果你想使用右连接的方式，比如table1 RIGHT JOIN table2
        在 SQLite 你可以写成table2 LEFT JOIN table1，这样就可以得到相同的效果。

8 关于连接的性能问题:
    一: 控制连接表的数量:
        不要连接不必要的表。在许多 DBMS 中，也都会有最大连接表的限制
    二: 在连接时不要忘记 WHERE 语句
        多表连接的目的不是为了做笛卡尔积，而是筛选符合条件的数据行
    三: 使用自连接而不是子查询
        我们在查看比布雷克·格里芬高的球员都有谁的时候，可以使用子查询，也可以使用自连接
        一般情况建议你使用自连接，因为在许多 DBMS 的处理过程中，对于自连接的处理速度要比子查询快得多







