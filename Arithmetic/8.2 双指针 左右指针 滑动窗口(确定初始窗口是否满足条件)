1 算法的大致逻辑:
    int left = 0, right = 0;

    while (right < s.size()) {
        // 增大窗口
        window.add(s[right]);
        right++;

        while (window needs shrink) {
            // 缩小窗口
            window.remove(s[left]);
            left++;
        }
    }

2 框架:
    /* 滑动窗口算法框架 */
    void slidingWindow(string s, string t) {
        unordered_map<char, int> need, window;
        for (char c : t) need[c]++;

        int left = 0, right = 0;
        int valid = 0; 
        while (right < s.size()) {
            // c 是将移入窗口的字符
            char c = s[right];
            // 右移窗口
            right++;
            // 进行窗口内数据的一系列更新
            ...

            /*** debug 输出的位置 ***/
            printf("window: [%d, %d)\n", left, right);
            /********************/

            // 判断左侧窗口是否要收缩
            while (window needs shrink) {
                // d 是将移出窗口的字符
                char d = s[left];
                // 左移窗口
                left++;
                // 进行窗口内数据的一系列更新
                ...
            }
        }
    }

3 开始套模板，只需要思考以下四个问题：
    1、当移动right扩大窗口，即加入字符时，应该更新哪些数据？

    2、什么条件下，窗口应该暂停扩大，开始移动left缩小窗口？

    3、当移动left缩小窗口，即移出字符时，应该更新哪些数据？

    4、我们要的结果应该在扩大窗口时还是缩小窗口时进行更新？

4 确定初始窗口是否满足条件:
    一: 初始窗口满足条件: 当窗口不满足条件时缩小窗口,在缩小窗口代码后面写主逻辑
    二: 初始窗口不满足条件: 当窗口满足条件时缩小窗口,在缩小窗口代码里面写主逻辑
    三: 初始窗口不满足条件: 持续扩大窗口,当窗口不满足条件时缩小窗口,在缩小窗口后面写主逻辑
