1 API:
    class UF {
        /* 将 p 和 q 连接 */
        public void union(int p, int q);
        /* 判断 p 和 q 是否连通 */
        public boolean connected(int p, int q);
        /* 返回图中有多少个连通分量 */
        public int count();
    }

2 完整代码(C++99): 不记录连通量中元素个数
    class UF{
    public:
        UF(int n){
            parent = vector<int>(n,0);
            for(int i = 0 ; i < parent.size() ; ++i){
                parent[i] = i;
            }
            
            count = n;
        }
        
        bool Connected(int p,int q){
            int rootp = find(p);
            int rootq = find(q);
            return rootp == rootq;
        }
        
        void Union(int p,int q){
            int rootp = find(p);
            int rootq = find(q);
            if(rootp == rootq)
                return;
            
            parent[rootp] = rootq;
            
            count--;
        }
        
        int Count(){
            return count; 
        }
    private:
        /* 返回某个节点 x 的根节点 */
        int find(int x){
            while(x != parent[x]){
                parent[x] = parent[parent[x]];
                x = parent[x];
            }
            return x;
        }
        
        // 存储一棵树
        vector<int> parent;
        // 连通分量个数
        int count;
    };

3 完整代码(C++99): 记录连通量中元素个数
    class UF{
    public:
        UF(int n){
            parent = vector<int>(n,0);
            size = vector<int>(n,0);
            for(int i = 0 ; i < parent.size() ; ++i){
                parent[i] = i;
                size[i] = 1;
            }
            
            count = n;
        }
        
        bool Connected(int p,int q){
            int rootp = find(p);
            int rootq = find(q);
            return rootp == rootq;
        }
        
        void Union(int p,int q){
            int rootp = find(p);
            int rootq = find(q);
            if(rootp == rootq)
                return;
            
            parent[rootp] = rootq;
            size[rootq] += size[rootp];
            
            count--;
        }
        
        int Count(){
            return count; 
        }
    private:
        /* 返回某个节点 x 的根节点 */
        int find(int x){
            while(x != parent[x]){
                parent[x] = parent[parent[x]];
                x = parent[x];
            }
            return x;
        }
        
        // 存储一棵树
        vector<int> parent;
        // 连通分量个数
        int count;
        // 新增一个数组记录树的“重量”
        vector<int> size;
    };