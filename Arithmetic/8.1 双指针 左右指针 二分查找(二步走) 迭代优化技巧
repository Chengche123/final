1 切入点:
    首先思考使用 for 循环暴力解决问题，观察代码是否如下形式：
    for (int i = 0; i < n; i++)
        if (isOK(i))
            return answer;
    如果是，那么就可以使用二分搜索优化搜索空间：
    如果要求最小值就是搜索左侧边界的二分，
    如果要求最大值就用搜索右侧边界的二分。

2 二分查找框架:
    func binarySearch(ary []int, v int) int {
        left, right := 0, len(ary)
        
        for left < right {
            mid := left+(right-left)/2
            if ary[mid] == v {
                return mid
            } else if v < ary[mid] {
                right = mid
            } else {
                left = mid + 1
            }
        }
        
        return -1
    }

3 寻找左侧边界的二分搜索
    func leftBound(ary []int, v int) int {
        left, right := 0, len(ary)
        
        for left < right {
            mid := left + (right - left) / 2
            if v <= ary[mid] {
                right = mid
            }else {
                left = mid + 1
            }
        }
        
        if right == len(ary) || ary[right] != v {
            return -1
        }
        
        return right
    }

4 寻找右侧边界的二分查找
    func rightBound(ary []int, v int) int {
        left, right := 0, len(ary)
        
        for left < right {
            mid := left + (right - left) / 2
            if v >= ary[mid] {
                left = mid + 1
            }else {
                right = mid
            }
        }
        
        if left == 0 || ary[left - 1] != v {
            return -1
        }
        
        return left - 1
    }

5 二步走(自己总结):
    一: 确定数组中满足条件的项有多少个,是否是边界查找
    二: 确定在每个mid上,应该左缩还是右缩

6 具体来说，想要用二分搜索算法解决问题，分为以下几步：
    一: 确定x, f(x), target分别是什么，并写出函数f的代码。
        自变量x是什么呢？题目让求什么，就把什么设为自变量
    二: 找到x的取值范围作为二分搜索的搜索区间，初始化left和right变量。
    三: 根据题目的要求，确定应该使用搜索左侧还是搜索右侧的二分搜索算法，写出解法代码。