1 切入点:
    首先思考使用 for 循环暴力解决问题，观察代码是否如下形式：
    for (int i = 0; i < n; i++)
        if (isOK(i))
            return answer;
    如果是，那么就可以使用二分搜索优化搜索空间：
    如果要求最小值就是搜索左侧边界的二分，
    如果要求最大值就用搜索右侧边界的二分。

2 二分查找框架:
    int binarySearch(int[] nums, int target) {
        int left = 0; 
        int right = nums.length - 1; // 注意

        while(left <= right) { // 注意
            int mid = (right + left) / 2;
            if(nums[mid] == target)
                return mid; 
            else if (nums[mid] < target)
                left = mid + 1; // 注意
            else if (nums[mid] > target)
                right = mid - 1; // 注意
            }
        return -1;
    }

3 寻找左侧边界的二分搜索
    int left_bound(int[] nums, int target) {
        if (nums.length == 0) return -1;
        int left = 0;
        int right = nums.length; // 注意

        while (left < right) { // 注意
            int mid = (left + right) / 2;
            if (nums[mid] == target) {
                right = mid;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else if (nums[mid] > target) {
                right = mid; // 注意
            }
        }
        return left;
    }

4 寻找右侧边界的二分查找
    int right_bound(int[] nums, int target) {
        if (nums.length == 0) return -1;
        int left = 0, right = nums.length;

        while (left < right) {
            int mid = (left + right) / 2;
            if (nums[mid] == target) {
                left = mid + 1; // 注意
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else if (nums[mid] > target) {
                right = mid;
            }
        }
        return left - 1; // 注意
    }

5 二步走:
    一: 确定数组中满足条件的项有多少个,是否是边界查找
    二: 确定在每个mid上,应该左缩还是右缩