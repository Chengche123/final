  1 WaitGroup:
    // makeThumbnails6 makes thumbnails for each file received from the channel.
    // It returns the number of bytes occupied by the files it creates.
    func makeThumbnails6(filenames <-chan string) int64 {
        sizes := make(chan int64)
        var wg sync.WaitGroup // number of working goroutines
        for f := range filenames {
            wg.Add(1)
            // worker
            go func(f string) {
                defer wg.Done()
                thumb, err := thumbnail.ImageFile(f)
                if err != nil {
                    log.Println(err)
                    return
                }
                info, _ := os.Stat(thumb) // OK to ignore error
                sizes <- info.Size()
            }(f)
        }

        // closer
        go func() {
            wg.Wait()
            close(sizes)
        }()

        var total int64
        for size := range sizes {
            total += size
        }
        return total
    }
2 并发的退出:
    func main() {
        var wg sync.WaitGroup
        type result struct {
            v   int
            err error
        }
        ch := make(chan *result)
        ctx, cancel := context.WithCancel(context.Background())

        for i := 0; i < 10; i++ {
            wg.Add(1)
            go func(v int, c context.Context) {
                defer wg.Done()

                select {
                case <-c.Done():
                    return
                default:
                }

                if v == 5 {
                    ch <- &result{
                        v:   v,
                        err: errors.New("test"),
                    }
                } else {
                    ch <- &result{
                        v:   v,
                        err: nil,
                    }
                }

            }(i, ctx)
        }

        go func() {
            wg.Wait()
            close(ch)
        }()

        for v := range ch {
            if v.err != nil {
                cancel()
                log.Println(v.err)
                for range ch {
                }
                return
            }

            fmt.Println(v.v)
        }
    }