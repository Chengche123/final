1 SQL 的存储过程，和视图一样，都是对 SQL 代码进行封装，可以反复利用
  存储过程实际上由 SQL 语句和流控制语句共同组成

2 定义一个存储过程:
    一: 格式:
          CREATE PROCEDURE 存储过程名称 ([参数列表])
          BEGIN
              需要执行的语句
          END    
    二: 查询某一类型英雄中的最大的最大生命值，最小的最大魔法值，以及平均最大攻击值:
          DELIMITER //
          CREATE PROCEDURE `get_hero_scores`(
                OUT max_max_hp FLOAT,
                OUT min_max_mp FLOAT,
                OUT avg_max_attack FLOAT,  
                IN s VARCHAR(255)
                )
          BEGIN
                SELECT MAX(hp_max), MIN(mp_max), AVG(attack_max) FROM heros WHERE role_main = s INTO max_max_hp, min_max_mp, avg_max_attack;
          END //
          DELIMITER ;

3 调用存储过程:
    一: CALL get_hero_scores(@max_max_hp, @min_max_mp, @avg_max_attack, '战士');
        SELECT @max_max_hp, @min_max_mp, @avg_max_attack;
            +-------------+-------------+-------------------+
            | @max_max_hp | @min_max_mp | @avg_max_attack   |
            +-------------+-------------+-------------------+
            |        8050 |           0 | 342.1666564941406 |
            +-------------+-------------+-------------------+

4 修改和删除存储过程:
    一: 删除已经创建的存储过程，使用的是 DROP PROCEDURE
    二: 更新存储过程，我们需要使用 ALTER PROCEDURE

5 流控制语句(略)

6 关于存储过程使用的争议:
    一 优点:  1) 一次编译多次使用。存储过程只在创造时进行编译，之后的使用都不需要重新编译
              2) 减少开发工作量 把复杂的问题拆解成不同的模块，然后模块之间可以重复使用
              3) 安全性强，我们在设定存储过程的时候可以设置对用户的使用权限
              4) 减少网络传输量，因为代码封装到存储过程中，每次使用只需要调用存储过程即可

    二 缺点:  1) 可移植性差，存储过程不能跨数据库移植
              2) 调试困难，只有少数 DBMS 支持存储过程的调试
              3) 版本管理也很困难，比如数据表索引发生变化了，可能会导致存储过程失效
              4) 不适合高并发的场景

