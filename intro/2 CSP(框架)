1 博客地址:https://www.jianshu.com/p/36e246c6153d

Goroutine:
1 (框架-协程)Goroutine:
      Goroutine 是实际并发执行的实体，它底层是使用协程(coroutine)实现并发，coroutine是一种运行在用户态的用户线程
2 (框架-协程优点)coroutine:go底层选择使用coroutine的出发点是因为，它具有以下特点：
    一:避免了内核态和用户态的切换导致的成本,包括内存的分配与释放，都是在用户态维护着一块大的内存池， 
       不直接调用系统的malloc函数（除非内存池需要改变）
    二:更小的栈空间允许创建大量的实例(动态栈,*goroutine：*2KB ，线程：2MB)
3 (框架-协程调度):优势:单从线程调度讲，go比起其他语言的优势在哪里了？
    go的线程模型是M：N的。 其一大特点是goroutine的调度是在用户态下完成的， 不涉及内核态与用户态之间的频繁切换，
    包括内存的分配与释放，都是在用户态维护着一块大的内存池， 不直接调用系统的malloc函数（除非内存池需要改变）。 
    另一方面充分利用了多核的硬件资源，近似的把若干goroutine均分在物理线程上， 再加上本身goroutine的超轻量，
    以上种种保证了go调度方面的性能。
4 真言:
   不要用共享内存的方式来通信。作为替代，应该以通信作为手段来共享内存。
5 栈空间:
   每一个goroutine所能申请的栈空间的最大尺寸。
   在32位的计算机系统中此最大尺寸为250 MB，而在64位的计算机系统中此尺寸为1 GB

channel:
1 (框架)Go自带channel多路复用语法

2 channel:CSP中channel是第一类对象，它不关注发送消息的实体，而关注与发送消息时使用的channel。
   在实现原理上其实是一个阻塞的消息队列。
3 解耦:一个实体通过将消息发送到channel 中，然后又监听这个 channel 的实体处理，
   两个实体之间是匿名的，这个就实现实体中间的解耦