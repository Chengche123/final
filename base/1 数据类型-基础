1 Go语言将数据类型分为四类：基础类型、复合类型、引用类型和接口类型。
    一:本章介绍基础类型，包括：数字、字符串和布尔型。
    二:复合数据类型——数组（§4.1）和结构体（§4.2）——是通过组合简单类型，来表达更加复杂的数据结构。
    三:引用类型包括指针（§2.3.2）、切片（§4.2)）、字典（§4.3）、函数（§5）、通道（§8），
       虽然数据种类很多，但它们都是对程序中一个变量或状态的间接引用。
       这意味着对任一引用类型数据的修改都会影响所有该引用的拷贝。

2 整型:
    系统无关:
        这里有int8、int16、int32和int64四种截然不同大小的有符号整数类型，
        分别对应8、16、32、64bit大小的有符号整数，与此对应的是uint8、uint16、uint32和uint64四种无符号整数类型。
    系统相关:
        这里还有两种一般对应特定CPU平台机器字大小的有符号和无符号整数int和uint；其中int是应用最广泛的数值类型。
        还有一种无符号的整数类型uintptr，没有指定具体的bit大小但是足以容纳指针。
        uintptr类型只有在底层编程时才需要，特别是Go语言和C语言函数库或操作系统接口相交互的地方。

3 字符串:
    一个字符串是一个不可改变的字节序列。
    不变性意味着如果两个字符串共享相同的底层数据的话也是安全的，这使得复制任何长度的字符串代价是低廉的。

4 字符串和[]byte转换代价:
    从概念上讲，一个[]byte(s)转换是分配了一个新的字节数组用于保存字符串数据的拷贝，然后引用这个底层的字节数组。
    将一个字节slice转换到字符串的string(b)操作则是构造一个字符串拷贝，以确保s2字符串是只读的。

5 常量:
    iota 常量生成器



