/*
1 系统初始化
*/
1) bootloader时期:
    一: 启动盘: 大部分情况下在第一个扇区，占512字节，而且以0xAA55结束。
    二: MBR: 启动盘的第一个扇区。这个扇区通常称为MBR（Master Boot Record，主引导记录/扇区）
        boot.img。它由boot.S编译而成，一共512字节，安装到启动盘的第一个扇区
    三: BIOS完成任务后，会将boot.img从硬盘加载到内存中的0x7c00来运行。
        boot.img的主要作用是加载grub2的另一个镜像core.img。
    四: core.img由lzma_decompress.img、diskboot.img、kernel.img和一系列的模块组成
    五: kernel.img不是Linux的内核，而是grub的内核
        kernel.img对应的代码是startup.S以及一堆c文件，在startup.S中会调用grub kernel的主函数grub_main
        ...
        grub_cmd_linux()函数会读取Linux内核镜像头部的一些数据结构放到内存中，进行检查。
        如果检查通过，则会读取整个Linux内核镜像到内存。
        ...
        grub_command_execute (“boot”, 0, 0)会开始真正地启动内核。

2) 1号进程: 用户态祖先进程的创建；
    一: rest_init的第一大工作是，用kernel_thread(kernel_init, NULL, CLONE_FS)创建第二个进程，这个是1号进程。
    二: 该进程会运行kernel_init函数。

3) 2号进程: 内核态祖先进程的创建。
    一: 使用kernel_thread(kthreadd, NULL, CLONE_FS | CLONE_FILES)函数创建进程
    二: 函数kthreadd，负责所有内核态的线程的调度和管理，是内核态所有线程运行的祖先。

4) glibc:
    一: glibc将系统调用的细节封装成更加友好的接口,可以直接用。

/*
2 进程管理
*/
1) ELF:
    一: 第一种类型 可重定位文件（Relocatable File）
        有的section，例如.rel.text, .rel.data就与重定位有关
    二: 第二种类型 可执行文件
        各个section是多个.o文件合并而成,小的section合成了大的段segment,并在最前面加一个段头表
    三: 第三种类型 共享对象文件（Shared Object）
        多了一个.interp的Segment，这里面是ld-linux.so，是动态链接器
        还多了两个section，一个是.plt，过程链接表（Procedure Linkage Table，PLT），
        一个是.got.plt，全局偏移量表（Global Offset Table，GOT）

2) 线程的数据: 线程栈 进程里共享的全局数据和TLS

3) 无论是进程，还是线程，到了内核里面，我们统一都叫任务（Task），由一个统一的结构task_struct进行管理:
    一: 任务ID 每一个任务都应该有一个ID，作为这个任务的唯一标识。
        pid是process id，tgid是thread group ID。
    二: 信号处理 处理的结果可以是忽略，可以是结束进程等等。
    三: 任务状态: 就绪 运行或者阻塞
    四: 进程调度: 调度策略和优先级
    五: 运行统计信息: 用户态消耗的CPU时间;内核态消耗的CPU时间;自愿(voluntary)上下文切换计数
        非自愿(involuntary)上下文切换计数;进程启动时间，不包含睡眠时间;进程启动时间，包含睡眠时间
    六: 进程亲缘关系: parent指向其父进程; children表示链表的头部。链表中的所有元素都是它的子进程;
    七: 进程权限: 谁能操作我和我能操作谁
    八: 内存管理: 虚拟内存空间
    九: 文件与文件系统: 每个进程有一个文件系统的数据结构，还有一个打开文件的数据结构
    十: 内核态函数栈: 略

4) 主动调度和被抢占:
    一: 主动调度 一个运行中的进程主动调用__schedule让出CPU
    二: 可抢占的场景
        一个进程执行时间太长了，是时候切换到另一个进程了
        当一个进程被唤醒的时候。

5) 进程 线程和协程:
    一: 进程的创建完全由内核态完成
    二: 线程的创建由用户态和内核态共同完成
    三: 协程的创建完全由用户态完成

/*
3 内存管理
*/
1) 用户空间:
    一: 低位开始排起，先是Text Segment、Data Segment和BSS Segment。
        Text Segment是存放二进制可执行代码的位置，Data Segment存放静态常量，BSS Segment存放未初始化的静态变量
        这里就是把二进制执行文件的三个部分加载到内存里面。
    二: 接下来是堆（Heap）段。堆是往高地址增长的
    三: 接下来的区域是Memory Mapping Segment
        这块地址可以用来把文件映射进内存用的，
        如果二进制的执行文件依赖于某个动态链接库，就是在这个区域里面将so文件映射到了内存中。
    四: 再下面就是栈（Stack）地址段。主线程的函数调用的函数栈就是用这里的。

2) 虚假分段:
    一: 在Linux中,所有的段的起始地址都是一样的，都是0。这算哪门子分段嘛！
        所以，在Linux操作系统中，并没有使用到全部的分段功能。
        分段可以做权限审核，例如用户态DPL是3，内核态DPL是0。当用户态试图访问内核态的时候，会因为权限不足而报错。

3) 多级页表的作用:
    一: 如果只使用页表，也需要完整的1M个页表项共4M的内存
    二: 但是如果使用了页目录，页目录需要1K个全部分配，占用内存4K，但是里面只有一项使用了
        到了页表项，只需要分配能够管理那个数据页的页表项页就可以了

4) 32位内核态布局: 见图
    一: 在物理内存的开始的896M的空间，会被直接映射到3G至3G+896M的虚拟地址
        在系统启动的时候，物理内存的前1M已经被占用了
        从1M开始加载内核代码段，然后就是内核的全局变量、BSS等，也是ELF里面涵盖的
        高端内存: 高端内存是物理内存的概念,指896M以上的内存
    二: 在896M到VMALLOC_START之间有8M的空间。
    三: VMALLOC_START到VMALLOC_END之间称为内核动态映射空间，
        也即内核想像用户态进程一样malloc申请内存，在内核里面可以使用vmalloc
    四: PKMAP_BASE到FIXADDR_START的空间称为持久内核映射。
        使用alloc_pages()函数的时候，在物理内存的高端内存得到struct page结构，可以调用kmap将其在映射到这个区域。
    五: FIXADDR_START到FIXADDR_TOP(0xFFFF F000)的空间，称为固定映射区域，主要用于满足特殊需求。
        在最后一个区域可以通过kmap_atomic实现临时内核映射
        例: 如果要把文件内容写入物理内存，这件事情要内核来干了
            通过kmap_atomic做一个临时映射，写入物理内存完毕后，再kunmap_atomic来解映射即可。

5) 64位内核态布局: 见图
    一: 从0xffff800000000000开始就是内核的部分，只不过一开始有8T的空档区域。
    二: 从__PAGE_OFFSET_BASE(0xffff880000000000)开始的64T的虚拟地址空间是直接映射区域
        也就是减去PAGE_OFFSET就是物理地址
        虚拟地址和物理地址之间的映射在大部分情况下还是会通过建立页表的方式进行映射。
    三: 从VMALLOC_START（0xffffc90000000000）开始到VMALLOC_END（0xffffe90000000000）的32T的空间是给vmalloc的。
    四: 从VMEMMAP_START（0xffffea0000000000）开始的1T空间用于存放物理页面的描述结构struct page的。
    五: 从__START_KERNEL_map（0xffffffff80000000）开始的512M用于存放内核代码段、全局变量、BSS等。
        这里对应到物理内存开始的位置，减去__START_KERNEL_map就能得到物理内存的地址。

6) 用户态内存映射:
    一: 内存管理并不直接分配物理内存，只有等你真正用的那一刻才会开始分配。
        访问虚拟内存的某个地址时，如果没有对应的物理页,就触发缺页中断，调用do_page_fault。
    二: 用户态访问虚拟内存时的地址转换的过程无需进入内核态。
    三: 三种映射:
        如果是匿名映射则分配物理内存
        如果是文件映射，则将文件读入。需要在内核里面临时映射将文件内容写入到物理内存
        如果是swap，则将swap文件读入；同样需要内核做临时映射。
    四: TLB就是页表的Cache，其中存储了当前最可能被访问到的页表项，其内容是部分页表项的一个副本。






