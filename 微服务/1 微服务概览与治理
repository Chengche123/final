1 微服务起源:
    一: 可以把微服务看成是SOA(面向服务架构)的一种实践
    二: 小即是美：小的服务代码少，bug 也少，易测试，易维护，也更容易不断迭代完善的精致进而美妙。
    三: 单一职责：一个服务也只需要做好一件事，专注才能做好。

2 微服务定义:
    一: 围绕业务功能构建的，服务关注单一业务，服务间采用轻量级的通信机制，
        可以全自动独立部署，可以使用不同的编程语言和数据存储技术
    二: 微服务架构通过业务拆分实现服务组件化，通过组件组合快速开发系统，
        业务单一的服务组件又可以独立部署，使得整个系统变得清晰灵活

3 用 Go 实施一个微服务:
    一: kit：一个微服务的基础库(框架)
    二: service：业务代码 + kit 依赖 + 第三方依赖组成的业务微服务,可以独立部署
    三: rpc + message queue：轻量级通讯.服务与服务之间需要通信
        b站主要用gRPC(同步)和kafka(异步)

4 Design For Failure(鲁棒性编程):
    一: 所有你依赖的东西都会炸
    二: 你写的代码的任何地方都会panic

5 API Gateway和BFF:
    一: 具体场景:
        有账号,相关视频和稿件服务,BFF取稿件信息,再取账号信息和相关视频,将数据打包组装
        API Gateway负责接口鉴权，日志监控和限流等功能,没有业务逻辑的侵入,不会耦合业务发布,发布相对简单
    二: 一定要面向用户业务场景的API,不要面向资源的API
    三: 前轻后重,数据的组装聚合要在服务端完成


6 gRPC:
    一: 基于标准的HTTP2设计，支持双向流、单TCP的多路复用等特性
        http1.1的问题是发一个req,再等res的时间什么都不能干
        一个tcp连接可以发送很多req,然后等待res,只要在每个req包中带一个callerid
        存在的问题是队首阻塞（Head-of-line blocking, HOL）
    二: 服务间的通信使用粗粒度的方式,即批量接口

7 伯斯塔尔法则:
    一: 发送时保守，接收时开放



