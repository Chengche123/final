1 拦截器的应用场景:
    一: 客户端和服务端都可用的:
        1)Auth 身份验证
        2)Logging 日志记录
        3)Monitoring 监控和追踪
    二: 客户端常用的:
        1)grpc_retry 超时重试机制
    三: 服务端常用的:
        1)grpc_recovery 将panic转换成grpc调用错误
        2)ratelimit 限流

2 客户端:
    一:
        package main

        import (
            "context"
            "fmt"
            "google.golang.org/grpc"
            "time"

            "start/grpc_interceptor/proto"
        )

        func interceptor(ctx context.Context, method string, req, reply interface{}, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {
            start := time.Now()
            err := invoker(ctx, method, req, reply, cc, opts...)
            fmt.Printf("method=%s req=%v rep=%v duration=%s error=%v\n", method, req, reply, time.Since(start), err)
            return err
        }

        func main(){
            //stream
            var opts []grpc.DialOption

            opts = append(opts, grpc.WithInsecure())
            // 指定客户端interceptor
            opts = append(opts, grpc.WithUnaryInterceptor(interceptor))

            conn, err := grpc.Dial("localhost:50051", opts...)
            if err != nil {
                panic(err)
            }
            defer conn.Close()

            c := proto.NewGreeterClient(conn)
            r, err := c.SayHello(context.Background(), &proto.HelloRequest{Name:"bobby"})
            if err != nil {
                panic(err)
            }
            fmt.Println(r.Message)
        }

3 服务端:
    一:
        package main

        import (
            "context"
            "fmt"
            "net"

            "google.golang.org/grpc"

            "start/grpc_interceptor/proto"
        )


        type Server struct{}

        func (s *Server) SayHello(ctx context.Context, request *proto.HelloRequest) (*proto.HelloReply,
            error){
            return &proto.HelloReply{
                Message: "hello "+request.Name,
            }, nil
        }


        func main(){
            var interceptor grpc.UnaryServerInterceptor
            interceptor = func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (resp interface{}, err error) {
                // 继续处理请求
                fmt.Println("接收到新请求")
                res, err := handler(ctx, req)
                fmt.Println("请求处理完成")
                return res, err
            }
            var opts []grpc.ServerOption
            opts = append(opts, grpc.UnaryInterceptor(interceptor))

            g := grpc.NewServer(opts...)
            proto.RegisterGreeterServer(g, &Server{})
            lis, err := net.Listen("tcp", "0.0.0.0:50051")
            if err != nil{
                panic("failed to listen:"+err.Error())
            }
            err = g.Serve(lis)
            if err != nil{
                panic("failed to start grpc:"+err.Error())
            }
        }